7 Quicksort
- 7.1 Description of quicksort
- 7.2 Performance of quicksort
- 7.3 A randomized version of quicksort
- 7.4 Analysis of quicksort
Problems
- 7.1 Hoare partition correctness
- 7.2 Quicksort with equal element values
- 7.3 Alternative quicksort analysis
- 7.4 Stack depth for quicksort



(7.1)
expected: O( N * LOG(N) ), worst-case: O( N^2 )
QUICKSORT(A,p,r)
1. if p < r
2.	q = PARTITION(A,p,r)
3.	QUICKSORT(A, p, q - 1)
4.	QUICKSORT(A, q + 1, r)


(7.1)
O(N)
PARTITION(A,p,r)
1. x = A[r]
2. i = p - 1
3. for j = p to r - 1	
4.	if A[j] <= x
5.		i = i + 1
6.		exchange A[i] with A[j]
7. exchange A[i + 1] with A[r]
8. return i + 1

(7.3)
O(N)
RANDOMIZED-PARTITION(A,p,r)
1. i = RANDOM(p,r)
2. exchange A[r] with A[i]
3. return PARTIITON(A,p,r)

(7.3)
expected: O( N * LOG(N) ), worst-case: O( N^2 )
RANDOMIZED-QUICKSORT(A,p,r)
1. if p < r
2.	q = RANDOMIZED-PARTITION(A, p ,r )
3.	RANDOMIZED-QUICKSORT(A, p, q - 1)
4.	RANDOMIZED-QUICKSORT(A, q + 1, r)

( Problem 7-1)
O( N * LOG(N) )
HOARE-PARTITION(A,pr)
1.  x = A[p]
2.  i = p - 1 
3.  j = r + 1 
4.  while TRUE  
5.	repeat
6.		j = j - 1
7.	until A[j] <= x
8.	repeat
9.		i = i + 1
10.	until A[i] >= x
11.	if i < j
12.		exchange A[i] with A[j]
13.	else return j

