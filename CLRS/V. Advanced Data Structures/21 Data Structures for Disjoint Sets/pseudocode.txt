21 Data Structures for Disjoint Sets
- 21.1 Disjoint-set operations
- 21.2 Linked-list representation of disjoint sets
- 21.3 Disjoint-set forests
- 21.4 (*) Analysis of union by rank with path compression

Problems
- 21-1: Off-line minimum
- 21-2: Depth determination
- 21-3: Tarjan's off-line least-common-ancestors algorithm


Pseudocode

(21.1)
CONNECTED-COMPONENTS(G)
1. for each vertex v in G.V
2.      MAKE-SET(v)
3. for each edge in G.E
4.      if FIND-SET(u) != FIND-SET(V)    
5.          UNION(u,v)

(21.1)
SAME-COMPONENT(u,v)
1. if FIND-SET(u) == FIND-SET(v)
2.      return TRUE
3. else return FALSE

* LinkedList Set Representation Attributes:
    - Head: Beginning of list. The set's representative element 
    - Tail: Last element of the set
    - Next: Points to the next eelment of the set
    - Prev: Points to the set's representative element, Head
    - Length: Number of elements in the Linked-List Set
    - Nil: A dummy pointer node. Used for Head's Prev attribute and Tail's next
           attribute 

* LinkedList Disjoint-Set operation run-time complexity:
    (1) FIND-SET(x): O(1)
    (2) MAKE-SET(x): O(1)
    (3) UNION(x,y): O(N) (worst-case)
    (Using weighted-heuristic, where the list with the smaller Length is merged
     onto the one with the larger Length)
    (4) Total: Sum( 1, 2, 3 ): O( M + N*LOG(N))
        - with N Make-Set operations, N-1 UNION, and M: SUM(1,2,3) 

(21.2)
( x:= element )
MAKE-SET(x)
1. make a new Linked-List L
2. L.Head = x
3. L.Length = 1


(21.2)
( x := LinkedList representing the elements set)
FIND-SET(x)
1. return x.Head

(21.2)
( x, y : = elements, which are assumed to exist in sets)
UNION(x,y)
1. LINK(FIND-SET(x), FIND-SET(y))

(21.2)
( X: )
LINK(x,y)
1. if x.Length >= y.Length
2.   x.Tail.Next = y.Head  
3.   x.Tail = y.Head   
4.   n = y.Head
5.   while n != NIL
6.      c.Prev = x.Head
7.      c = c.Next 
8.   x.Length = x.Length + y.Length
9.   // destroy y's set
10. else // x.Length < y.Length   
11.   y.Tail.Next = x.Head  
12.   y.Tail = x.Head   
13.   n = x.Head
14.   while n != NIL
15.      c.Prev = x.Head
16.      c = c.Next 
17.   y.Length = y.Length + x.Length
18   // destroy x's set

* Tree Set Representation Attributes:
    - Parent: Returns the parent and the representative of the set (if the path
      compression heuristic is implemented)
    - Rank:The height of the tree rooted at the specific node.  

* Tree Disjoint-Set operation run-time complexity:
    (1) FIND-SET(x): O(1)
    (2) MAKE-SET(x): O(1)
    (3) UNION(x,y): O(N) (worst-case)
    (Using weighted-heuristic, where the list with the smaller Length is merged
     onto the one with the larger Length)
    (4) Total: Sum( 1, 2, 3 ): O( M + N*LOG(N))
        - with N Make-Set operations, N-1 UNION, and M: SUM(1,2,3) 

(21.3)
MAKE-SET(x)
1. x.p = x
2. x.rank = 0

(21.3)
UNION(x,y)
1. LINK(FIND-SET(x), FIND-SET(y))

LINK(x,y)
1. if x.rank > y.rank
2.      y.p = x
3. else x.p = y
4.      if x.rank == y.rank
5.          y.rank = y.rank + 1

(21.3)
FIND-SET(x)
1. if x != x.p
2.    x.p = FIND-SET(x.p)  
3. return x.p

(21-3)
LCA(u)
1. MAKE-SET(u)
2. FIND-SET(u).ancestor = u
3. for each child v of u in T
4.      LCA(v)
5.      UNION()
6.      FIND-SET(u).ancestor = u
7.  u.color = BLACK
8.  for each node v such that {u,v} in P
9.      if v.color == BLACK
10.         print "The least common ancestor of u and v is FIND-SET(v).ancestor"
