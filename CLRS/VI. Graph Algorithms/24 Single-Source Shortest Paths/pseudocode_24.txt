24 Single-Source Shortest Paths
- 24.1 The Bellman-Ford algorithm
- 24.2 Single-source shortest paths in directed acyclic graphs
- 24.3 Dijkstra's algorithm
- 24.4 Difference constraints and shortest paths
- 24.5 Proofs of shortest-paths properties

Problems
- 24-1 Yen's improvement to Bellman-Ford
- 24-2 Nesting boxes
- 24-3 Arbitrage
- 24-4 Gabow's scaling algorithm for single-source shortest paths
- 24-5 Karp's minimum mean-weight cycle algorithm
- 24-6 Bitonic shortest paths

Pseudocode

INITIALIZE-SINGLE-SOURCE(G,s)
1. for each vertex v in G.V
2.    v.d = infinity
3.    v.parent = NIL
4. s.d = 0

RELAX(u,v,w)
1. if v.d > u.d + w(u,v)
2.    v.d = u.d + w(u,v)
3.    v.parent = u

(24.1)
BELLMAN-FORD(G,w,s)
1. INITIALIZE-SINGLE-SOURCE(G,s)
2. for i = 1 to |G.V| - 1
3.    for each edge (u,v) in G.E
4.        RELAX(u,v,w)
5. for each edge (u,v) in G.E
6.    if v.d > u.d + w(u,v)
7.        return FALSE
8. return TRUE


(24.2)
DAG-SHORTEST-PATHS(G,w,s)
1. topologically sort the vertices of G
2. INITIALIZE-SINGLE-SOURCE(G,s)
3. for each vertex u, taken in topologically sorted order
4.    for each vertex v in G.Adj[u] 
5.        RELAX(u,v,w)

(24.3)
( where Q:= min-priority queue )
DIJKSTRA(G,w,s)
1. INITIALIZE-SINGLE-SOURCE(G,s)
2. S = empty-set
3. Q = G.V
4. while Q != empty-set
5.    u = EXTRACT-MIN(Q)
6.    S = S union {u}
7.    for each vertex v in G.Adj[u]
8.        RELAX(u,v,w)

