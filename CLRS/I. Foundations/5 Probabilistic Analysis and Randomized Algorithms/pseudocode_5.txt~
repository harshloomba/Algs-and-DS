5 Probabilistic Analysis and Randomized Algorithms
	
	5.1 The hiring problem
	5.2 Indicator random variables
	5.3 Randomized algorithms
	5.4 Probabilistic analysis and further uses of indicator random
	variables (*)
	Problems

Problems:

	5-1 Probabilistic counting
	5-2 Searching an unsorted array

5.1 The hiring problem

	HIRE-ASSISTANT(n)
	1.	best = 0	// candidate 0 is a least-qualified dummy candidate
	2.	for i = 1 to n
	3.		interview candidate i
	4.		if candidate is is better than candidate best
	5.			best = i
	6.			hire candidate i




5.3 Randomized algorithms

	RANDOMIZED-HIRE-ASSISTANT(n)
	1	randomly permute the list of candidates 
	2.	best = 0	// candidate 0 is a least-qualified dummy candidate
	3.	for i = 1 to n
	4.		interview candidate i
	5.		if candidate is is better than candidate best
	6.			best = i
	7.			hire candidate i


	PERMUTE-BY-SORTING(A)
	1.	n = A.length
	2.	let P[1..n] be a new array
	3.	for i = 1 to n
	4.		P[i] = RANDOM(1,n^3)
	5.	sort A, using P as sort keys

	RANDOMIZE-IN-PLACE(A)
	1.	n = A.length
	2.	for i = 1 to n
	3.		swap A[i] with A[RANDOM(i,n)]


	** EXERCISES **
	PERMUTE-WITHOUT-IDENTITY(A)
	1.	n = A.length
	2.	for i = 1 to n - 1
	3.		swap A[i] with A[RANDOM(i+1, n)]

	** EXERCISES **
	PERMUTE-WITH-ALL(A)
	1.	n = A.length
	2.	for i = 1 to n
	3.		swap A[i] with A[RANDOM(1,n)]

	** EXERCISES **
	PERMUTE-BY-CYCLIC(A)
	1.	n = A.length
	2.	let B[1..n] be a new array
	3.	offset = RANDOM(1,n)
	4.	for i = 1 to n
	5.		dest = i + offset
	6.		if dest > n
	7.			dest = dest - n
	8.		B[dest] = A[i]
	9.	return B

	** EXERCISES **
	RANDOM-SAMPLE(m,n)
	1.	if m == 0
	2.		return emptyset
	3.	else S = RANDOM-SAMPLE(m-1,n-1)
	4.		i = RANDOM(1,n)
	5.		if i IN S
	6.			S = S UNION {n}
	7.		else S = S UNION {n}
	8.		return S


5.4 Probabilistic analysis and further uses of indicator random variables

	ON-LINE-MAXIMUM(k,n)
	1.	bestscore = negative infinity
	2.	for i = 1 to k
	3.		if score(i) > bestcore
	4.			bestscore = score(i)
	5.	for i = k + 1 to n
	6.		if score(i) > bestscore
	7.			return i
	8.	return n
