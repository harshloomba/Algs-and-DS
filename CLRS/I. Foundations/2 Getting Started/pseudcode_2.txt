2 Getting Started
- 2.1 Insertion Sort
- 2.2 Analyzing Algorihtms
- 2.3 Designing Algorithms

Problems
- 2-1 Insertion sort on small arrays in merge sort
- 2-2 Correctness of bubblesort
- 2-3 Correctness of Horner's rule
- 2-4 Inversions

Pseudocode

(2.1)
O(N^2)
INSERTION-SORT(A)
1. for j = 2 to A.length
2. 	key = A[j]
3.	// Insert A[j] into the sorted sequence A[1..j-1]
4.	i = j - 1
5.	while i > 0 and A[i] > key
6.		A[i + 1] = A[i]
7.		i = i - 1
8.	A[i + 1] = key


(2.3)
O(N)
MERGE(A,p,q,r)
1.  n1 = q - p + 1
2.  n2 = r - q	
3.  let L[1..n1] and R[1..n2] be new arrays
4.  for i = 1 to n1 
5.	L[i] = A[ p + i]
6.  for j = 1 to n21 
7.	R[j] = A[ q + i + 1]
8.  i = j = 0, k = p 
9.  while i < n1 and j < n2 	
10.	if L[i] <= R[j]
11.		A[k] = L[i]
12.		i = i + 1
13.	else	
14.		A[k] = R[j] 
15.	k = k + 1
16. if i != n1
17.	for i to n1
18.		A[k] = L[i]
19.		k = k + 1
20.
21. if j != n2
22.	for j to n2
23.		A[k] = R[j]

(2.3)
O( N * LOG(N) ) // LOG(N) calls of MERGE
MERGE-SORT(A,p,r)
1. if p < r
2.	q = floor()
3.	MERGE-SORT(A, p, q)
4.	MERGE-SORT(A, q + 1, r)
5.	MERGE(A, p, q, r)

(Problem 2-2)
O(N^2)
BUBBLESORT(A)
1. for i = 1 to A.length - 1
2. 	for j = A.length downto i + 1
3.		if A[j] < A[j - 1]
4.			exchange A[j] with A[j - 1]


(Problem 2-4)
O(N^2)
BRUTE-FORCE-INVERSION(A)
1. inversions = 0
2. for i = to A.length - 1 
3.	for j = i + 1 to A.length	
4.		if A[i] > A[j]
5.			inversions = inversions + 1
6. return inversions	

(Problem 2-4)
O(N*LOG(N)) := LOG(N) calls of itself and MERGE-INVERSIONS() (LOG(N))
COUNT-INVERSIONS(A, p, r)
1. if p < r
2.	q = floor( (p+r)/2 )
3.	x = COUNT-INVERSIONS(A, p, q)	
4.	y = COUNT-INVERSIONS(A, q + 1, r)	
5.	z = MERGE-INVERSIONS(A, p, q, r)
6.	return x + y + z
7. else
8.	return 0

(Problem 2-4)
O(N))
MERGE-INVERSIONS(A, p, q, r)
1.  n1 = q - p + 1
2.  n2 = r - q	
3.  let L[1..n1] and R[1..n2] be new arrays
4.  for i = 1 to n1 
5.	L[i] = A[ p + i]
6.  for j = 1 to n21 
7.	R[j] = A[ q + i + 1]
8.  i = j = 0, k = p, inversions = 0
9.  while i < n1 and j < n2 	
10.	if L[i] <= R[j]
11.		A[k] = L[i]
12.		i = i + 1
13.	else	// # of inversions = all the elements in L
14.		A[k] = R[j] 
15.		inversions = inversions + (n1 - i)
16.	k = k + 1
17. if i != n1
18.	for i to n1
19.		A[k] = L[i]
20.		k = k + 1
21.
22. if j != n2
23.	for j to n2	// # of inversions = all the elements in L
24.		A[k] = R[j]
25.		inversions = inversions + (n1 - i)
26. return inversions
